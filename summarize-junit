#!/usr/bin/env python

# Copyright (c) 2011 Eric Evans <eevans@sym-link.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import re, sys, time


STATUS_RE = re.compile(
        '.+ Tests run: ([\d]+), Failures: ([\d]+), Errors: ([\d]+)')
TSUITE_RE = re.compile('.+ Testsuite: (.+)')

RED = "\033[1;31m%s\033[0m"
GREEN = "\033[1;32m%s\033[0m"
YELLOW = "\033[1;33m%s\033[0m"


def color(value, color=GREEN):
    if value:
        return color % value
    return value

def split_class(cls):
    parts = cls.split('.')
    return ('.'.join(parts[:-1]), '.'.join(parts[-1:]))

def main():
    stats = {}
    wax_on = False
    curr_class = None
    start = time.time()

    try:
        line = sys.stdin.readline()
        while (line):
            if not wax_on:
                match = TSUITE_RE.match(line)
                if (match):
                    curr_class = match.group(1)
                    wax_on = True
            else:
                match = STATUS_RE.match(line)
                if (match):
                    (run, fail, err) = match.groups()
                    if not curr_class:
                        raise RuntimeError("no class name matched")
                    stats[curr_class] = (int(run), int(fail), int(err))
                    curr_class = None
                    wax_on = False

            sys.stdout.write(line)
            sys.stdout.flush()
            line = sys.stdin.readline()
    except KeyboardInterrupt:
        pass

    seen = []
    total_runs = 0
    total_fail = 0
    total_err = 0

    print
    print "Summary Results"
    print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    
    for cls in stats.keys():
        (run, fail, err) = stats[cls]
        total_runs += run
        total_fail += fail
        total_err += err

        (package, class_name) = split_class(cls)
        if class_name in seen:
            name = "%s:" % cls
        else:
            name = "%s:" % class_name
            seen.append(class_name)
        
        print "%-48s %s, %s, %s" % \
                (name, color(run), color(fail, RED), color(err, YELLOW))

    print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    print "Tests run: %d, Failures: %d, Error: %d, Time elapsed: %.2f sec" % \
            (total_runs, total_fail, total_err, (time.time()-start))
    print


if __name__ == '__main__':
    main()
